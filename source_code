class Yahtzee:

    @staticmethod
    def chance(dice):
        return sum(dice)

    @staticmethod
    def yahtzee(dice):
        yahtzee_bonus = 50
        counts = Yahtzee.get_counts(dice)
        for i in range(len(counts)):
            if counts[i] == 5:
                return yahtzee_bonus
        return 0

    @staticmethod
    def score_by_number(dice, number):
        score_count = 0
        for i in dice:
            if i == number:
                score_count += number
        return score_count

    @staticmethod
    def ones(dice):
        return Yahtzee.score_by_number(dice, 1)

    @staticmethod
    def twos(dice):
        return Yahtzee.score_by_number(dice, 2)

    @staticmethod
    def threes(dice):
        return Yahtzee.score_by_number(dice, 3)

    @staticmethod
    def fours(dice):
        return Yahtzee.score_by_number(dice, 4)

    @staticmethod
    def fives(dice):
        return Yahtzee.score_by_number(dice, 5)

    @staticmethod
    def sixes(dice):
        return Yahtzee.score_by_number(dice, 6)

    @staticmethod
    def get_counts(dice):
        counts = [0]*7
        for die in dice:
            if 1<=die<=6:
                counts[die]+=1
            else:
                raise ValueError("Incorrect die number in dice")
        return counts

    @staticmethod
    def score_pair(dice):
        counts = Yahtzee.get_counts(dice)
        for value in range(len(counts) - 1, 0, -1):
            if counts[value] >= 2:
                return value * 2
        return 0


    @staticmethod
    def two_pair(dice):
        counts = Yahtzee.get_counts(dice)
        pairs = [i for i in range(1, 7) if counts[i] >= 2]
        if len(pairs) >=2:
            return sum(pairs) * 2
        else:
            return 0

    @staticmethod
    def three_of_a_kind(dice):
        counts = Yahtzee.get_counts(dice)
        for i in range(1, 7):
            if counts[i] >= 3:
                return i * 3
        return 0

    @staticmethod
    def four_of_a_kind(dice):
        counts = Yahtzee.get_counts(dice)
        for i in range(1,7):
            if counts[i] >= 4:
                return i*4
        return 0

    @staticmethod
    def small_straight(dice):
        small_straight_bonus = 15
        counts = Yahtzee.get_counts(dice)
        required_numbers = [1, 2, 3, 4, 5]

        for number in required_numbers:
            if counts[number] == 0:
                return 0

        return small_straight_bonus

    @staticmethod
    def large_straight(dice):
        large_straight_bonus = 20
        counts = Yahtzee.get_counts(dice)
        required_numbers = [2, 3, 4, 5, 6]

        for number in required_numbers:
            if counts[number] == 0:
                return 0

        return large_straight_bonus

    @staticmethod
    def full_house(dice):
        counts = Yahtzee.get_counts(dice)

        has_three_of_a_kind = any(count == 3 for count in counts[1:])
        has_two_of_a_kind = any(count == 2 for count in counts[1:])

        if has_three_of_a_kind and has_two_of_a_kind:
            return sum(dice)
        return 0
